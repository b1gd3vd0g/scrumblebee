openapi: 3.0.0
info:
  title: scrumblebee-authentication-microservice
  description:
    provides and decodes jwts used for authentication services for the
    app scrumblebee
  version: 0.1.0

servers:
  - url: http://localhost.com:4042
    description: testing server on my computer.
  - url: https://api.bigdevdog.com:4043
    description: live production server

paths:
  /:
    get:
      summary: verifies an existing jwt.
      security:
        - apiKey: []
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: The jwt which is being verified. Starts with 'Bearer '
          example: 'Bearer [jwt]'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                expected:
                  type: object
                  description:
                    Each key of expected will be tested against the token
                    header. If (token[key] !== expected[key]), verification
                    fails.
                  example:
                    username: b1gd3vd0g'
      responses:
        200:
          description: jwt is verified, unexpired, and meets all expectations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pass:
                    type: boolean
                    description: This will always be true with a 200 response.
                      Token was verified successfully.
        400:
          description: bad request. The token header was not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pass:
                    type: boolean
                    description: This will always be false with a 400 response.
                  message:
                    type: string
                    description: A string explaining what went wrong.
        401:
          description:
            verification failed! jwt may be expired, or its values may not meet
            the provided expectations. It could also be that the token was not
            able to be deciphered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pass:
                    type: boolean
                    description: false.
                  message:
                    type: string
                    description: a message describing what went wrong.
                  mismatch:
                    type: array
                    items:
                      type: string
                    description: a list of all fields which did not meet expectations.
                required:
                  - pass
                  - message
        403:
          description: API key is either missing or invalid!
          content:
            application/json:
              schema:
                type: object
                properties:
                  pass:
                    type: boolean
                    description: Always false with a 403 response.
    post:
      summary: creates a jwt which is good for 60 minutes.
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  description: the information to be stored inside the jwt.
                  example:
                    username: b1gd3vd0g
                    email: devin@bigdevdog.com
      responses:
        200:
          description: jwt was created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Always true for a 200 response
                  token:
                    type: string
                    description:
                      The jwt containing the payload which is verifiable only
                      by this site and containing the payload.
        400:
          description: Bad request - no payload included.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: always false for a 400 response
                  message:
                    type: string
                    description: a short description of what went wrong
        403:
          description: API key is either missing or invalid!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Always false with a 403 response.
                  message:
                    type: string
                    description: a short description of what went wrong.

components:
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      bearerFormat: JWT
